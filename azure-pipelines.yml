trigger:
  - main

pool:
  vmImage: ubuntu-latest

stages:
  - stage: dev
    displayName: Dev
    jobs:
      - job: plan
        displayName: Run terraform plan
        steps:
          - task: DownloadSecureFile@1
            name: dev
            displayName: Download backend config file
            inputs:
              secureFile: "dev-config.azurerm.tfbackend"
          - script: |
              terraform init -backend-config=$(dev.secureFilePath)
              terraform plan -var-file=dev.tfvars -out=$(Build.SourcesDirectory)/dev.tfplan
            displayName: Run terraform plan
            failOnStderr: true
            env:
              ARM_CLIENT_ID: $(client-id)
              ARM_TENANT_ID: $(tenant-id)
              ARM_CLIENT_SECRET: $(client-secret)
              ARM_SUBSCRIPTION_ID: $(dev-subscription-id)
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.SourcesDirectory)"
              artifact: "dev"
              publishLocation: "pipeline"
            condition: succeeded()
      - deployment: apply
        displayName: Run terraform apply
        dependsOn: plan
        environment: "dev"
        strategy:
          runOnce:
            deploy:
              steps:
                - script: |
                    chmod -R a+x .terraform/*
                    terraform apply --auto-approve dev.tfplan
                  displayName: Run terraform apply
                  failOnStderr: true
                  workingDirectory: /home/vsts/work/1/
                  env:
                    ARM_CLIENT_ID: $(client-id)
                    ARM_TENANT_ID: $(tenant-id)
                    ARM_CLIENT_SECRET: $(client-secret)
                    ARM_SUBSCRIPTION_ID: $(dev-subscription-id)
        condition: succeeded()
  - stage: test
    displayName: Test
    dependsOn: dev
    jobs:
      - job: plan
        displayName: Run terraform plan
        steps:
          - task: DownloadSecureFile@1
            name: test
            displayName: Download backend config file
            inputs:
              secureFile: "test-config.azurerm.tfbackend"
          - script: |
              terraform init -backend-config=$(test.secureFilePath)
              terraform plan -var-file=test.tfvars -out=$(Build.SourcesDirectory)/test.tfplan
            displayName: Run terraform plan
            failOnStderr: true
            env:
              ARM_CLIENT_ID: $(client-id)
              ARM_TENANT_ID: $(tenant-id)
              ARM_CLIENT_SECRET: $(client-secret)
              ARM_SUBSCRIPTION_ID: $(test-subscription-id)
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.SourcesDirectory)"
              artifact: "test"
              publishLocation: "pipeline"
            condition: succeeded()
        condition: succeeded()
      - deployment: apply
        displayName: Run terraform apply
        dependsOn: plan
        environment: "test"
        strategy:
          runOnce:
            deploy:
              steps:
                - script: |
                    chmod -R a+x .terraform/*
                    terraform apply --auto-approve test.tfplan
                  displayName: Run terraform apply
                  workingDirectory: /home/vsts/work/1/
                  failOnStderr: true
                  env:
                    ARM_CLIENT_ID: $(client-id)
                    ARM_TENANT_ID: $(tenant-id)
                    ARM_CLIENT_SECRET: $(client-secret)
                    ARM_SUBSCRIPTION_ID: $(test-subscription-id)
        condition: succeeded()
    condition: succeeded()
  - stage: prod
    displayName: Prod
    dependsOn: test
    jobs:
      - job: plan
        displayName: Run terraform plan
        steps:
          - task: DownloadSecureFile@1
            name: prod
            displayName: Download backend config file
            inputs:
              secureFile: "prod-config.azurerm.tfbackend"
          - script: |
              terraform init -backend-config=$(prod.secureFilePath)
              terraform plan -var-file=prod.tfvars -out=$(Build.SourcesDirectory)/prod.tfplan
            displayName: Run terraform plan
            failOnStderr: true
            env:
              ARM_CLIENT_ID: $(client-id)
              ARM_TENANT_ID: $(tenant-id)
              ARM_CLIENT_SECRET: $(client-secret)
              ARM_SUBSCRIPTION_ID: $(prod-subscription-id)
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.SourcesDirectory)"
              artifact: "prod"
              publishLocation: "pipeline"
            condition: succeeded()
        condition: succeeded()
      - deployment: apply
        displayName: Run terraform apply
        dependsOn: plan
        environment: "prod"
        strategy:
          runOnce:
            deploy:
              steps:
                - script: |
                    chmod -R a+x .terraform/*
                    terraform apply --auto-approve prod.tfplan
                  displayName: Run terraform apply
                  workingDirectory: /home/vsts/work/1/
                  failOnStderr: true
                  env:
                    ARM_CLIENT_ID: $(client-id)
                    ARM_TENANT_ID: $(tenant-id)
                    ARM_CLIENT_SECRET: $(client-secret)
                    ARM_SUBSCRIPTION_ID: $(prod-subscription-id)
        condition: succeeded()
    condition: succeeded()
